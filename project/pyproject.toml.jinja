[project]
name = "{{ python_package_distribution_name }}"
version = "0.0.1"
description = "{{ project_description }}"
authors = [
    {name = "{{ author_username }}", email = "{{ author_email }}"}
]
requires-python = ">=3.12"
readme = "README.md"
dependencies = []

[tool.uv]
dev-dependencies = [
    "commitizen>=4.8.4",
    "invoke>=2.2.0",
    "mkdocs-macros-plugin>=1.3.9",
    "mkdocs-material>=9.6.19",
    "mkdocstrings>=0.30.0",
    "pre-commit>=4.3.0",
    "pytest-cov>=6.3.0",
    "pytest>=8.4.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# ==================================================================================
# Tool Configurations
# ==================================================================================

[tool.ruff]
target-version = "py312"
line-length = 88
src = ["{{ python_package_import_name }}", "tests"]

[tool.ruff.lint]
# Enable comprehensive rule set for modern Python development
select = [
    "A",    # flake8-builtins
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle errors
    "EM",   # flake8-errmsg
    "F",    # Pyflakes
    "FBT",  # flake8-boolean-trap
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "N",    # pep8-naming
    "PLC",  # Pylint conventions
    "PLE",  # Pylint errors
    "PLR",  # Pylint refactor
    "PLW",  # Pylint warnings
    "Q",    # flake8-quotes
    "RUF",  # Ruff-specific rules
    "S",    # flake8-bandit
    "T20",  # flake8-print
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
]

ignore = [
    # Allow print statements in specific contexts
    "T201",  # print found
    # Allow TODO comments
    "FIX002", # Line contains TODO
    # Project-specific ignores (customize as needed)
    "D100",   # Missing docstring in public module
    "D104",   # Missing docstring in public package
    "S101",   # Use of assert detected (allow in tests)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "S101",   # asserts allowed in tests
    "ARG",    # unused function args (fixtures)
    "FBT",    # don't care about booleans as positional args in tests
    "PLR2004", # Magic value used in comparison
    "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.ruff.lint.isort]
force-single-line = true
lines-between-types = 1
lines-after-imports = 2

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.mypy]
# Strict type checking configuration
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_unreachable = true
warn_unused_ignores = true
show_error_codes = true
show_error_context = true
pretty = true

# Additional strict checks
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false
disallow_untyped_decorators = false
warn_return_any = false

[[tool.mypy.overrides]]
module = "tasks.*"
disallow_untyped_defs = false
disallow_untyped_calls = false
disallow_untyped_decorators = false
warn_return_any = false
